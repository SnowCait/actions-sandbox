name: 'Sparse checkout'
description: 'Sparse checkout a git repository'
inputs:
  # Same as actions/checkout
  repository:
    description: 'Repository name with owner. For example, actions/checkout'
    default: ${{ github.repository }}
    required: false
  ref:
    description: >
      The branch, tag or SHA to checkout. When checking out the repository that
      triggered a workflow, this defaults to the reference or SHA for that
      event.  Otherwise, uses the default branch.
    required: false
  token:
    description: >
      Personal access token (PAT) used to fetch the repository. The PAT is configured
      with the local git config, which enables your scripts to run authenticated git
      commands. The post-job step removes the PAT.


      We recommend using a service account with the least permissions necessary.
      Also when generating a new PAT, select the least scopes necessary.


      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    default: ${{ github.token }}
    required: false
  path:
    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'
    default: .
    required: false

  # sparse checkout
  patterns:
    description: >
      Write a set of patterns to the sparse-checkout file.

      [Learn more about set](https://git-scm.com/docs/git-sparse-checkout#Documentation/git-sparse-checkout.txt-emsetem)
    required: true

runs:
  using: composite
  steps:
#     - name: Cloning the repository
#       run: /usr/bin/git clone --no-checkout --filter=tree:0 --depth 1 $REPOSITORY $PATH
#       env:
#         PATH: ${{ inputs.path }}
#         REPOSITORY: https://${{ github.actor }}:${{ inputs.token }}@github.com/${{ inputs.repository }}.git
#       shell: bash

    - name: Setting git path
      run: |
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "GIT=/usr/local/bin/git" >> $GITHUB_ENV
        elif [ "$RUNNER_OS" == "Windows" ]; then
          echo "GIT=/cmd/git" >> $GITHUB_ENV
        else
          echo "GIT=/usr/bin/git" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Debug
      run: |
        gh api rate_limit
        printenv
      env:
        GH_TOKEN: ${{ inputs.token }}
      shell: bash
#     - run: echo $GITHUB_PATH
#       shell: bash
#     - run: ls -l /usr/bin
#       shell: bash
#     - run: ls -l /bin
#       shell: bash

    - name: Getting Git version info
      run: |
        echo "::group::Getting Git version info"
        $GIT version
        echo "::endgroup::"
      shell: bash

    - name: Preparing the repository
      run: |
        echo "::group::Preparing the repository"
        echo $GITHUB_SERVER_URL
        if [ -d $DIRECTORY ]; then
          # already exists
          cd $DIRECTORY
          $GIT config --local --get remote.origin.url
          $GIT branch -a
        else
          # first clone
          /bin/mkdir -p $DIRECTORY
          cd $DIRECTORY
          $GIT init
          $GIT remote add origin ${GITHUB_SERVER_URL}/${REPOSITORY}
        fi
        echo "::endgroup::"
      env:
        REPOSITORY: ${{ inputs.repository }}
        DIRECTORY: ${{ inputs.path }}
      shell: bash

#     - name: Make directory
#       run: /usr/bin/mkdir -p $DIRECTORY
#       env:
#         DIRECTORY: ${{ inputs.path }}
#       shell: bash

#     - run: echo "::group::Initializing the repository"
#       shell: bash
#     - run: $GIT init
#       working-directory: ${{ inputs.path }}
#       shell: bash
#     - run: $GIT remote add origin $REPOSITORY
#       env:
#         REPOSITORY: ${{ env.GITHUB_SERVER_URL }}/${{ inputs.repository }}
#       working-directory: ${{ inputs.path }}
#       shell: bash
#     - run: $GIT remote -v
#       working-directory: ${{ inputs.path }}
#       shell: bash
#     - run: echo "::endgroup::"
#       shell: bash

    - name: Disabling automatic garbage collection
      run: |
        echo "::group::Disabling automatic garbage collection"
        $GIT config --local gc.auto 0
        echo "::endgroup::"
      working-directory: ${{ inputs.path }}
      shell: bash

    - run: echo "::group::Setting up auth"
      shell: bash
#     - run: |
#         BASIC_CREDENTIAL="$(echo "x-access-token:" | xxd -p -c 256)$(echo $TOKEN | xxd -p -c 256)"
#         echo "::add-mask::${BASIC_CREDENTIAL}"
#         $GIT config --local http.https://github.com/.extraheader "AUTHORIZATION: basic ${BASIC_CREDENTIAL}"
#       env:
#         TOKEN: ${{ inputs.token }}
#       shell: bash
    - name: debug
      run: |
        $GIT config --local http.https://github.com/.extraheader
        cat .git/config
      shell: bash
    - run: echo "::endgroup::"
      shell: bash

    - run: echo "::group::Setting up sparse checkout"
      shell: bash
    - name: Sparse checkout
      run: |
        cat .git/config
        $GIT sparse-checkout init --cone
        $GIT sparse-checkout set $PATTERNS
      env:
        PATTERNS: ${{ inputs.patterns }}
      working-directory: ${{ inputs.path }}
      shell: bash
    - run: echo "::endgroup::"
      shell: bash

    - run: echo "::group::Determining the default branch"
      shell: bash
    - run: echo "::endgroup::"
      shell: bash

    - run: echo "::group::Fetching the repository"
      shell: bash
    - name: Fetching the repository
      run: |
        echo $REF
        if [ -z "$REF" ]; then
          if [ "$REPOSITORY" == "$GITHUB_REPOSITORY" ]; then
            REF="${GITHUB_REF/#refs\/heads\//}"
          else
            REF=$(gh api repos/$REPOSITORY --jq '.default_branch')
          fi
        fi
        echo $REF
        $GIT -c protocol.version=2 fetch --no-tags --prune --progress --depth=1 origin +${REF}:refs/remotes/origin/${REF}
      env:
        REF: ${{ inputs.ref }}
        REPOSITORY: ${{ inputs.repository }}
        GH_TOKEN: ${{ inputs.token }}
      working-directory: ${{ inputs.path }}
      shell: bash
    - run: echo "::endgroup::"
      shell: bash

    - run: echo "::group::Checking out the ref"
      shell: bash
    - name: Checking out the ref
      run: |
        # FIXME: duplication with fetch
        echo $REF
        if [ -z "$REF" ]; then
          if [ "$REPOSITORY" == "$GITHUB_REPOSITORY" ]; then
            REF="${GITHUB_REF/#refs\/heads\//}"
          else
            REF=$(gh api repos/$REPOSITORY --jq '.default_branch')
          fi
        fi
        echo $REF
        $GIT checkout --progress --force -B $REF refs/remotes/origin/$REF
      env:
        REF: ${{ inputs.ref }}
        REPOSITORY: ${{ inputs.repository }}
        GH_TOKEN: ${{ inputs.token }}
      working-directory: ${{ inputs.path }}
      shell: bash
    - run: echo "::endgroup::"
      shell: bash

    - run: $GIT log -1 --format='%H'
      shell: bash
