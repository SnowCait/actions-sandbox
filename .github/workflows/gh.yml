name: GitHub CLI

on:
  push:
#     branches:
#       - fix/**/*
    paths:
      - .github/workflows/gh.yml
  workflow_dispatch:

jobs:
#   create-pr:
#     runs-on: ubuntu-20.04

#     steps:
#       - run: echo $GITHUB_REF
#       - uses: actions/checkout@v2
#       - run: git branch
#       - run: git log -1 --oneline --pretty=format:'%s'
#       - run: gh pr create --draft --title "$(git log -1 --oneline --pretty=format:'%s')" --body "" --assignee $AUTHOR
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           AUTHOR: ${{ github.event.pusher.name }}
#   create-pr-fill:
#     runs-on: ubuntu-20.04

#     steps:
#       - run: echo $GITHUB_REF
#       # title と body を自動入力
#       - run: gh repo clone $GITHUB_REPOSITORY . -- --no-checkout --filter=tree:0 --branch ${GITHUB_REF#refs/heads/}
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       - run: git branch
#       - run: git log -1 --oneline --pretty=format:'%s'
#       - run: gh pr create --draft --fill --assignee $AUTHOR
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           AUTHOR: ${{ github.event.pusher.name }}


  github-cli:

    runs-on: ubuntu-20.04
    timeout-minutes: 3

    steps:
      - run: echo $GITHUB_REPOSITORY

      # バージョン、ヘルプ
      - run: gh --version
#       - run: gh --help
      - run: gh help actions
      - run: gh actions --help

#       # リポジトリ
#       - run: gh repo list
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       # PR 1
#       - run: gh pr list --repo $GITHUB_REPOSITORY
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       # PR 2
#       - run: gh pr list
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           GH_REPO: ${{ github.repository }}

#       # ヘルプ
#       - run: gh actions --help
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # なぜか認証が要る
#       - run: gh repo --help

#       # ワークフロー
#       - run: gh workflow list
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           GH_REPO: ${{ github.repository }}

#       # ワークフロー実行ログ
#       - run: gh run list --workflow 'GitHub CLI'
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           GH_REPO: ${{ github.repository }}
#       - run: gh run list --workflow gh.yml
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           GH_REPO: ${{ github.repository }}

#       # 実行中のワークフロー
#       - run: gh run view $(gh run list --workflow gh.yml --limit 1 | cut -f 7)
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           GH_REPO: ${{ github.repository }}

# #       # watch は無限ループするので注意（試す場合は要タイムアウト）
# #       - run: gh run watch $(gh run list --workflow gh.yml --limit 1 | cut -f 7)
# #         env:
# #           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
# #           GH_REPO: ${{ github.repository }}
# #         timeout-minutes: 1

      - run: ls -la
#       - uses: actions/checkout@v2
#       - run: gh repo clone $GITHUB_REPOSITORY . -- --depth 1
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       - run: ls -la
#       - run: ls -la .github/
#       - run: gh pr list
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # パーシャルクローン
      - run: gh repo clone $GITHUB_REPOSITORY . -- --no-checkout --filter=tree:0 --branch ${GITHUB_REF#refs/heads/}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: git sparse-checkout init --cone
      - run: git sparse-checkout set $PATTERNS
        env:
          PATTERNS: |
            docs
            labeler
      - run: ls -la
      - run: git branch
      - run: git switch ${GITHUB_REF#refs/heads/}
      - run: ls -la

#       # [REST API] Issue のタイトルリスト
#       - run: gh api repos/${REPOSITORY}/issues --jq '.[].title'
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           REPOSITORY: ${{ github.repository }}

#       # [GraphQL] リポジトリのリスト
#       - run: |
#           gh api graphql --paginate -f query='
#             query($endCursor: String) {
#               viewer {
#                 repositories(first: 100, after: $endCursor) {
#                   nodes { nameWithOwner }
#                   pageInfo {
#                     hasNextPage
#                     endCursor
#                   }
#                 }
#               }
#             }
#           '
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
