name: Docker

on:
  push:
    paths:
      - .github/workflows/docker.yml
      - docker/**

jobs:
  pre-installed:
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    env:
      MYSQL_PWD: root

    steps:
      - run: sudo systemctl start mysql.service
      - run: mysql -uroot -e "SHOW DATABASES"

  service-container-on-host:
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    env:
      MYSQL_PWD: root

    services:
      mysql-server:
        image: mysql:8.0.29
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_PWD }}
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - run: mysql --protocol=tcp -uroot -e "SHOW DATABASES"
#       - run: docker exec -e MYSQL_PWD ${CONTAINER_ID} mysql -uroot -e "SHOW DATABASES"
#         env:
#           CONTAINER_ID: ${{ job.services.mysql-server.id }}
#       - run: echo $JSON
#         env:
#           JSON: ${{ toJSON(job.services) }}
#       - run: docker logs $CONTAINER_ID
#         env:
#           CONTAINER_ID: ${{ job.services.mysql-server.id }}
#         if: always()

  service-container-on-container:
    runs-on: ubuntu-20.04
    container: mysql:8.0.29 # 実際は Node.js や PHP などのアプリコンテナ
    timeout-minutes: 5
    env:
      MYSQL_PWD: root

    services:
      mysql-server:
        image: mysql:8.0.28
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_PWD }}
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - run: mysql -hmysql-server -uroot -e "SHOW DATABASES"

  docker:
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    env:
      MYSQL_PWD: root

    steps:
      - run: docker network create bridge-network
      - run: |
          docker run \
            --name mysql-server \
            -e MYSQL_ROOT_PASSWORD=${MYSQL_PWD} \
            --network bridge-network \
            -d \
            --health-cmd "mysqladmin ping" \
            --health-interval 10s \
            --health-retries 5 \
            --health-timeout 5s \
            mysql:8.0.29
      - name: Wait for starting
        run: |
          set -x
          until [ "$(docker inspect --format='{{.State.Health.Status}}' mysql-server)" = 'healthy' ]; do
            sleep 1s
          done
      # 実際は Node.js や PHP などのアプリコンテナ
      - run: |
          docker run \
            --name mysql-client \
            --rm \
            -e MYSQL_PWD \
            --network bridge-network \
            mysql:8.0.29 \
            mysql -hmysql-server -uroot -e "SHOW DATABASES"
#       - run: docker exec -e MYSQL_PWD mysql-server mysql -uroot -e "SHOW DATABASES"
#       - run: docker logs mysql-server
#         if: always()

  docker-compose:
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    env:
      MYSQL_PWD: root
    defaults:
      run:
        working-directory: docker

    steps:
      - uses: actions/checkout@v3
      - run: docker compose up -d
      - name: Wait for starting
        run: |
          set -x
          until [ "$(docker inspect --format='{{.State.Health.Status}}' $(docker compose ps -q mysql-server))" = 'healthy' ]; do
            sleep 1s
          done
      - run: docker compose exec -T -e MYSQL_PWD=${MYSQL_PWD} mysql-client mysql -hmysql-server -uroot -e "SHOW DATABASES"
      - run: docker compose exec -T -e MYSQL_PWD=${MYSQL_PWD} mysql-server mysql -uroot -e "SHOW DATABASES"
#       - run: docker compose logs
#         if: always()
