name: Docker

on:
  push:
    paths:
      - .github/workflows/docker.yml
      - docker/**

jobs:
  pre-installed:
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    env:
      MYSQL_PWD: root

    steps:
      - run: sudo systemctl start mysql.service
      - run: mysql --protocol=tcp -P3306 -uroot -e "SHOW DATABASES"

  service-container:
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    env:
      MYSQL_PWD: test-user_password

    services:
      mysql:
        image: mysql:8.0.28
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_USER: test-user
          MYSQL_PASSWORD: ${{ env.MYSQL_PWD }}
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - run: docker ps
      - run: echo $JSON
        env:
          JSON: ${{ toJSON(job.services) }}
      - run: mysql -V
      - run: mysql --protocol=tcp -hlocalhost -P3306 -utest-user -e "SHOW DATABASES"
      - run: mysql --protocol=tcp -P3306 -utest-user -e "SHOW DATABASES"
      - run: docker logs $CONTAINER_ID
        env:
          CONTAINER_ID: ${{ job.services.mysql.id }}
        if: always()

  docker:
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    env:
      MYSQL_ROOT_PASSWORD: abcdef

    steps:
      - uses: actions/checkout@v3
      - run: |
          docker run \
            --name mysql \
            -v "${PWD}/.database":/var/lib/mysql \
            -e MYSQL_ROOT_PASSWORD \
            -d \
            --health-cmd 'mysqladmin ping' \
            --health-interval 10s \
            --health-retries 5 \
            --health-timeout 5s \
            mysql:8.0.28
      - run: docker inspect --format='{{.State.Health.Status}}' mysql
      - run: |
          set -x
          until [ "$(docker inspect --format='{{.State.Health.Status}}' mysql)" = 'healthy' ]; do
            echo "Container is starting..."
            sleep 1s
          done
      - run: docker ps
      - run: docker exec mysql mysql -V
      - run: docker exec -e MYSQL_PWD=${MYSQL_ROOT_PASSWORD} mysql mysql -uroot -e "SHOW DATABASES"
      - run: docker logs mysql
        if: always()
      - run: ls -la
      - run: ls -la .database/

  docker-compose:
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    env:
      MYSQL_ROOT_PASSWORD: abcdef
    defaults:
      run:
        working-directory: docker

    steps:
      - uses: actions/checkout@v3
      - run: docker-compose up -d
#       - run: docker-compose ps
#       - run: docker inspect $(docker-compose ps -q mysql)
#       - run: docker inspect $(docker-compose ps -q mysql) | jq -r '.[0]'
#       - run: docker inspect $(docker-compose ps -q mysql) | jq -r '.[0].State.Health.Status'
      - run: docker inspect --format='{{.State.Health.Status}}' $(docker-compose ps -q mysql)
      - run: |
          set -x
          until [ "$(docker inspect --format='{{.State.Health.Status}}' $(docker-compose ps -q mysql))" = 'healthy' ]; do
            echo "Container is starting..."
            sleep 1s
          done
#       - run: |
#           while [ "$(docker inspect $(docker-compose ps -q mysql) | jq -r '.[0].State.Health.Status')" == 'starting' ]; do
#             echo "Container is starting..."
#             sleep 2
#           done
#       - run: sleep 60
      - run: docker-compose ps
      - run: docker-compose exec -T mysql mysql -V
      - run: docker-compose exec -T --env MYSQL_PWD=${MYSQL_ROOT_PASSWORD} mysql mysql -uroot -e "SHOW DATABASES"
      - run: docker-compose logs
        if: always()
      - run: ls -la
      - run: ls -la .database/
