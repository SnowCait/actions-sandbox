name: Timeout

on:
  push:
    paths:
      - .github/workflows/timeout.yml

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 1
    env:
      GH_TOKEN: ${{ github.token }}
      GH_REPO: ${{ github.repository }}

    steps:
      - run: sleep 60
      - run: |
          gh workflow view "$GITHUB_WORKFLOW" --yaml > workflow.yml
          timeout_seconds=$(yq '.jobs.build.timeout-minutes * 60' workflow.yml)
          echo $timeout_seconds
          created_at=$(gh run view $GITHUB_RUN_ID --json createdAt,updatedAt \
            --jq '.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime')
          now=$(date '+%s')
          if ((now > created_at + timeout_seconds)); then
            echo "This is timed-out."
          fi
        if: cancelled()
      - run: |
          gh run view $GITHUB_RUN_ID
          if gh run view $GITHUB_RUN_ID | grep 'The run was canceled by'; then
            echo "This is manually cancel."
          fi
          if gh run view $GITHUB_RUN_ID | grep 'has exceeded the maximum execution time of'; then
            echo "This is timed out."
          fi
        if: cancelled() && false
      - run: |
          echo cancelled
          seconds=$(gh run view $GITHUB_RUN_ID --json createdAt,updatedAt \
            --jq '(.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime) - (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime)')
          echo $seconds
          echo $((TIMEOUT_MINUTES * 60))
          if ((seconds >= TIMEOUT_MINUTES * 60)); then
            echo "This is timed-out."
          fi
        env:
          TIMEOUT_MINUTES: ${{ steps.timeout.outputs.minutes }}
        if: cancelled() && false
